{"version":3,"sources":["components/Country/Country.js","components/CountryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Country","stats","className","src","CountryCode","alt","Active","Confirmed","Deaths","Recovered","CountryList","map","country","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","countries","fetch","resp","json","this","forEach","a","Slug","data","length","prevState","concat","ISO2","filteredCountries","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVAiBeA,G,YAdC,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACd,OACI,yBAAKC,UAAU,WACX,yBAAKC,IAAG,sCAAiCF,EAAMG,YAAvC,gBAAkEC,IAAKJ,EAAMD,UACrF,4BAAKC,EAAMD,SACX,yBAAKE,UAAU,YACX,8CAAgBD,EAAMK,SACtB,iDAAmBL,EAAMM,YACzB,8CAAgBN,EAAMO,SACtB,iDAAmBP,EAAMQ,gBCC1BC,G,MATK,SAAC,GAAc,IAAbT,EAAY,EAAZA,MAClB,OACI,yBAAKC,UAAU,eAEPD,EAAMU,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAQR,YAAaH,MAAOW,UCGhEE,G,MARG,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAC5B,OACI,yBAAKd,UAAU,UACf,2BAAOe,KAAK,SAASf,UAAU,SAC/Ba,YAAaA,EAAaG,SAAUF,OC2C7BG,E,kDA3Cb,aAAc,IAAD,8BACX,gBAsBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAtBpC,EAAKC,MAAQ,CACXC,UAAU,GACVzB,MAAM,GACNqB,YAAa,IALJ,E,yMASSK,MAAM,wC,cAAnBC,E,gBACkBA,EAAKC,O,OAAvBH,E,OACNI,KAAKT,SAAS,CAACK,cACfI,KAAKL,MAAMC,UAAUK,QAArB,uCAA6B,WAAMnB,GAAN,iBAAAoB,EAAA,sEACRL,MAAM,4CAAD,OAA6Cf,EAAQqB,OADlD,cACrBL,EADqB,gBAERA,EAAKC,OAFG,QAErBK,EAFqB,QAKnBC,QACR,EAAKd,UAAS,SAAAe,GAAS,MACrB,CACCnC,MAAMmC,EAAUnC,MAAMoC,OAAhB,2BAA2BH,EAAKA,EAAKC,OAAS,IAA9C,IAAiD/B,YAAYQ,EAAQ0B,YARnD,2CAA7B,kCAAAR,KAAA,gB,qIAcM,IAAD,EACsBA,KAAKL,MAA1BxB,EADD,EACCA,MAAMqB,EADP,EACOA,YACPiB,EAAoBtC,EAAMuC,QAAO,SAAA5B,GAAO,OAC5CA,EAAQZ,QAAQyC,cAAcC,SAASpB,EAAYmB,kBAErD,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CAAWa,YAAY,wBACvBC,aAAcc,KAAKd,eACnB,kBAAC,EAAD,CAAaf,MAASsC,IAAoB,6BAC1C,gCAAQ,oEACR,kC,GAtCUI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91dfe440.chunk.js","sourcesContent":["import React from 'react';\r\nimport './country.css';\r\n\r\nconst Country = ({stats}) =>{\r\n    return (\r\n        <div className=\"country\">\r\n            <img src={`https://www.countryflags.io/${stats.CountryCode}/flat/64.png`} alt={stats.Country}></img>\r\n            <h2>{stats.Country}</h2>\r\n            <div className=\"describe\">\r\n                <p>{`Active : ${stats.Active}`}</p>\r\n                <p>{`Confirmed : ${stats.Confirmed}`}</p>\r\n                <p>{`Deaths : ${stats.Deaths}`}</p>\r\n                <p>{`Recovered : ${stats.Recovered}`}</p> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Country;","import React from 'react';\r\nimport Country from '../Country/Country'\r\nimport './countrylist.css'\r\n\r\nconst CountryList = ({stats}) =>  {\r\n    return (\r\n        <div className=\"countrylist\">\r\n            { //get country names with country code\r\n                stats.map(country => <Country key={country.CountryCode} stats={country}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default CountryList;","import React from 'react';\r\nimport './searchbox.css'\r\n\r\nconst SearchBox = ({placeholder,handleChange}) => {\r\n    return (\r\n        <div className=\"header\">\r\n        <input type=\"search\" className=\"search\" \r\n        placeholder={placeholder} onChange={handleChange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './App.css';\r\nimport CountryList from './components/CountryList/CountryList';\r\nimport SearchBox from './components/SearchBox/SearchBox';\r\n\r\n//to create more functions used a class\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      countries:[],\r\n      stats:[],\r\n      searchField: ''\r\n    }\r\n  }\r\n  async componentDidMount(){\r\n     const resp = await fetch('https://api.covid19api.com/countries')\r\n     const countries = await resp.json()\r\n     this.setState({countries})\r\n     this.state.countries.forEach(async country => {\r\n       const resp = await fetch(`https://api.covid19api.com/total/country/${country.Slug}`)\r\n       const data = await resp.json()\r\n\r\n       //if statement use to remove countries that have no data. \r\n       if(data.length)\r\n       this.setState(prevState => (\r\n         //length-1 use to get latest data of that country\r\n         {stats:prevState.stats.concat({...data[data.length - 1],CountryCode:country.ISO2})}) )\r\n     })\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({searchField:e.target.value})\r\n  }\r\n  render(){\r\n    const {stats,searchField} = this.state\r\n    const filteredCountries = stats.filter(country =>(\r\n      country.Country.toLowerCase().includes(searchField.toLowerCase())\r\n    ))\r\n    return (\r\n      <div className=\"App\"> \r\n        <SearchBox placeholder=\"Enter country name...\"\r\n        handleChange={this.handleChange}/>\r\n        <CountryList stats = {filteredCountries}/><br></br>\r\n        <footer><b>Owner - sachithfernando599@gmail.com</b></footer>\r\n        <br></br>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}